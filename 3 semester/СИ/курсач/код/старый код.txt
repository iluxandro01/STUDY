#include <math.h>
#include <stdio.h>
#include <graphics.h>


double f(int n) { //вычисление текущего члена последовательности
    return pow(1 + 1.0 / n, n);;
}

double lim(double choose) { //вычисление числа е нерекуретно
    double y; //значение текущего члена последовательности
    int n = 1; //текущая итерация
    if (choose < 1) { //если переданное число < 1 => рассматриваем его как eps
        do {
            y = f(n);
            n++;
        } while (fabs(exp(1) - y) > choose);
    } else { //иначе рассматриваем его как  количество итераций, которое нужно провести
        while (n <= choose) {
            y = f(n);
            n++;
        }
    }
    return y;
}

double recLim(double choose, int n) { //вычисление числа е рекуретно
    double y; //значение текущего члена последовательности
    y = f(n);
    if (choose < 1) { //если переданное число < 1 => рассматриваем его как eps
        if (fabs(exp(1) - y) > choose)
            y = recLim(choose, n + 1);
    } else { //иначе рассматриваем его как  количество итераций, которое нужно провести
        if (n < choose) {
            y = recLim(choose, n + 1);
        }
    }
    return y;
}

void writingToFile(double choose, int separator) { //записб результатов вычислений в файл
    FILE *output;
    output = fopen("output.txt", "w");
    int n = 1; //текущая итерация
    double limY; //значение текущего нереккуретного члена последовательности
    double recLimY; //значение текущего реккуретного члена последовательности
    if (separator == 1) {
        fprintf(output, "-----------------------------------\n");
        fprintf(output, "| %2cn%2c | %3clim%4c | %2crecLim%2c |\n", ' ', ' ', ' ', ' ', ' ', ' ');
    } else {
        fprintf(output, "n lim recLim\n");
    }

    if (choose < 1) { //если переданное число < 1 => рассматриваем его как eps
        do {
            limY = lim(n);
            recLimY = recLim(n, 1);
            if (separator == 1) {
                fprintf(output, "-----------------------------------\n");
                fprintf(output, "| %-5d | %1.8f | %1.8f |\n", n, limY, recLimY);
            } else {
                fprintf(output, "%d %1.8f %1.8f\n", n, limY, recLimY);
            }
            n++;
        } while ((fabs(exp(1) - limY) > choose) || (fabs(exp(1) - recLimY) > choose));
    } else { //иначе рассматриваем его как  количество итераций, которое нужно провести
        while (n <= choose) {
            limY = lim(n);
            recLimY = recLim(n, 1);
            if (separator == 1) {
                fprintf(output, "-----------------------------------\n");
                fprintf(output, "| %-5d | %1.8f | %1.8f |\n", n, limY, recLimY);
            } else {
                fprintf(output, "%d %1.8f %1.8f\n", n, limY, recLimY);
            }
            n++;
        }
    }
    if (separator == 1) {
        fprintf(output, "-----------------------------------\n");
        fprintf(output, "|   Exact value e:   %1.8f   |\n", exp(1));
        fprintf(output, "-----------------------------------\n\n");
    } else {
        fprintf(output, "Exact value e : %1.8f\n", exp(1));
    }

    fclose(output);
}

void binaryWritingToFile(double choose) { //записб результатов вычислений в двоичный файл
    FILE *output;
    output = fopen("bin.bin", "w+b");
    int n = 1; //текущая итерация
    double limY; //значение текущего нереккуретного члена последовательности
    double recLimY; //значение текущего реккуретного члена последовательности
    if (choose < 1) { //если переданное число < 1 => рассматриваем его как eps
        do {
            limY = lim(n);
            recLimY = recLim(n, 1);
            fwrite(&n, sizeof(int), 1, output);
            fwrite(&limY, sizeof(double), 1, output);
            fwrite(&recLimY, sizeof(double), 1, output);
            n++;
        } while ((fabs(exp(1) - limY) > choose) || (fabs(exp(1) - recLimY) > choose));
    } else { //иначе рассматриваем его как  количество итераций, которое нужно провести
        while (n <= choose) {
            limY = lim(n);
            fwrite(&n, sizeof(int), 1, output);
            fwrite(&limY, sizeof(double), 1, output);
            fwrite(&recLimY, sizeof(double), 1, output);
            n++;
        }
    }
    limY = exp(1);
    fwrite(&limY, sizeof(double), 1, output);
    fclose(output);
}

int sizeOfFile(char *filename) {
    FILE *in;
    in = fopen(filename, "rb");
    fseek(in, 0, SEEK_END); //смещение указателя чтения на конец файла
    return ftell(in);
}

void table(double choose) {
    int n = 1; //текущая итерация
    double limY; //значение текущего нереккуретного члена последовательности
    double recLimY; //значение текущего реккуретного члена последовательности
    printf("-----------------------------------\n");
    printf("| %2cn%2c | %3clim%4c | %2crecLim%2c |\n", ' ', ' ', ' ', ' ', ' ', ' ');
    if (choose < 1) {
        do { //если переданное число < 1 => рассматриваем его как eps
            limY = lim(n);
            recLimY = recLim(n, 1);
            printf("-----------------------------------\n");
            printf("| %-5d | %1.8f | %1.8f |\n", n, limY, recLimY);
            n++;
        } while ((fabs(exp(1) - limY) > choose) || (fabs(exp(1) - recLimY) > choose));
    } else { //иначе рассматриваем его как  количество итераций, которое нужно провести
        while (n <= choose) {
            limY = lim(n);
            recLimY = recLim(n, 1);
            printf("-----------------------------------\n");
            printf("| %-5d | %1.8f | %1.8f |\n", n, limY, recLimY);
            n++;
        }
    }
    printf("-----------------------------------\n");
    printf("|   Exact value e:   %1.8f   |\n", exp(1));
    printf("-----------------------------------\n\n");
}

void graph(double choose) {
    int height; //высота окна
    int width; //ширина окна

    int numberSplitsX; //количество разбиений по оси X
    int numberSplitsY; //количество разбиений по оси Y

    double dy; //приращение для разбиения оси Y

    double coefx; //коэффицент масштабирования по оси X
    double coefy; //коэффицент масштабирования по оси Y

    char temp[4]; //буффер для вывода текста на экран
    double buff; //буффер для вычислений

    int i; //итератор по циклу

    double n; //итератор функции
    double y; //значение функции

//если мы высчитываем от eps, то считаем количество итерация для масштабирования
    if (choose < 1) {
        n = 1;
        do {
            y = f(n);
            n++;
        } while (fabs(exp(1) - y) > choose);
    } else {
        n = choose;
    }


    height = 750; //высота окна
    width = 750; //ширина окна

    initwindow(width, height); //инициализируем размеры окна
    line(0, height - 25, width - 10, height - 25); //рисуем ось X
    line(25, 10, 25, height); //рисуем ось Y

    line(20, 15, 25, 10);
    line(30, 15, 25, 10); //стрелка у оси Y
    line(width - 15, height - 30, width - 10, height - 25);
    line(width - 15, height - 20, width - 10, height - 25); //стрелка у оси X

    outtextxy(35, 7, "Y");
    outtextxy(width - 17, height - 50, "X"); //подписи у осей X и Y
    settextstyle(SMALL_FONT, HORIZ_DIR, 0); //стиль текста

//вывод масштаба у оси X
    numberSplitsX = 11;
    for (i = 0; i <= numberSplitsX; i++) {
        buff = n / numberSplitsX * i;
        sprintf(temp, "%1.f", buff);
        line((width - 50) / numberSplitsX * i + 25, height - 20, (width - 50) / numberSplitsX * i + 25, height - 30);
        outtextxy((width - 50) / numberSplitsX * i + 22, height - 15, temp);
    }

//вывод масштаба у оси Y
    numberSplitsY = 20;
    for (i = 0; i <= numberSplitsY; i++) {
        dy = 0.75 / numberSplitsY;
        buff = 2.75 - dy * i;
        sprintf(temp, "%1.2f", buff);
        outtextxy(3, ((width - 50) / numberSplitsY * i + 21), temp);
        line(20, ((width - 50) / numberSplitsY * i + 25), 30, ((width - 50) / numberSplitsY * i + 25));
    }

    coefx = (width - 25) / n; //вычисляем коэффицент масштабирования по оси X
    coefy = (height - 25) / 2.75; //вычисляем коэффицент масштабирования по оси Y

    moveto(25, height - 25);//переносим перо в нулевые координаты

//строим график
    n = 1;
    if (choose < 1) {
        do {
            y = f(n);
            lineto(coefx * n + 25, (height + 25) - coefy * y);
            n++;
        } while (fabs(exp(1) - y) > choose);
    } else {
        while (n < choose) {
            y = f(n);
            lineto(coefx * n + 25, (height + 25) - coefy * y);
            n++;
        }
    }

    setcolor(12);
    line(25,(height + 25) - coefy * exp(1),coefx * n + 25, (height + 25) - coefy * exp(1));
    settextstyle(0, HORIZ_DIR, 0); //стиль текста
    outtextxy(35, (height + 5) - coefy * exp(1), "E");

    getch();
    closegraph();
}

int main() {
    double eps = 0.001;
    int choose = -1;
    while (choose) {
        printf("1.Calculate e\n2.Table\n3.Graph\n4.Write to file\n5.Change value eps/n (now is %f)\n6.Size of files\n0.Exit\n",
               eps);
        scanf("%i", &choose);
        switch (choose) {
            case 0:
                break;
            case 1:
                printf("Calculated through the lim: %1.8f\n", lim(eps));
                printf("Calculated through the recursive lim: %1.8f\n", recLim(eps, 1));
                printf("Exact value e: %1.8f\n\n", exp(1));
                break;
            case 2:
                table(eps);
                break;
            case 3:
                printf("Graph built! Press any button to close\n\n");
                graph(eps);
                break;
            case 4:
                printf("1.With separators\n2.Without separators\n");
                scanf("%i", &choose);
                switch (choose) {
                    case 1:
                        writingToFile(eps, 1);
                        break;
                    default:
                    case 2:
                        writingToFile(eps, 0);
                        break;
                }
                binaryWritingToFile(eps);
                printf("The recording is over!\n\n");
                break;
            case 5:
                printf("Enter eps/n value: \n");
                scanf("%lf", &eps);
                printf("\n");
                break;
            case 6:
                printf("Size of output file: %d \n", sizeOfFile("output.txt"));
                printf("Size of binary file: %d \n\n", sizeOfFile("bin.bin"));
                break;
            default:
                printf("Error! Repeat please!\n\n");
                break;
        }
    }

    return 0;
}
